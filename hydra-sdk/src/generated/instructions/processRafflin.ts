/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ProcessRafflin
 * @category generated
 */
export const processRafflinStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ProcessRafflinInstructionArgs'
)
/**
 * Accounts required by the _processRafflin_ instruction
 *
 * @property [_writable_] fanout
 * @property [_writable_, **signer**] payer
 * @property [] switchboard
 * @property [] switchboardState
 * @property [] switchboardAttestationQueue
 * @property [_writable_] switchboardFunction
 * @property [_writable_, **signer**] switchboardRequest
 * @property [_writable_] switchboardRequestEscrow
 * @property [] switchboardMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category ProcessRafflin
 * @category generated
 */
export type ProcessRafflinInstructionAccounts = {
  fanout: web3.PublicKey
  payer: web3.PublicKey
  switchboard: web3.PublicKey
  switchboardState: web3.PublicKey
  switchboardAttestationQueue: web3.PublicKey
  switchboardFunction: web3.PublicKey
  switchboardRequest: web3.PublicKey
  switchboardRequestEscrow: web3.PublicKey
  switchboardMint: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const processRafflinInstructionDiscriminator = [
  153, 28, 173, 231, 150, 176, 224, 32,
]

/**
 * Creates a _ProcessRafflin_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ProcessRafflin
 * @category generated
 */
export function createProcessRafflinInstruction(
  accounts: ProcessRafflinInstructionAccounts,
  programId = new web3.PublicKey('3e8xyB755tq3EAFx6SbgHrRD51ETy4vfvZN8jPbr6pCP')
) {
  const [data] = processRafflinStruct.serialize({
    instructionDiscriminator: processRafflinInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.switchboard,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.switchboardState,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.switchboardAttestationQueue,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.switchboardFunction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.switchboardRequest,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.switchboardRequestEscrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.switchboardMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
