/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
export declare const processSignMetadataStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _processSignMetadata_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] fanout
 * @property [] holdingAccount
 * @property [_writable_] metadata
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
export type ProcessSignMetadataInstructionAccounts = {
    authority: web3.PublicKey;
    fanout: web3.PublicKey;
    holdingAccount: web3.PublicKey;
    metadata: web3.PublicKey;
    tokenMetadataProgram: web3.PublicKey;
};
export declare const processSignMetadataInstructionDiscriminator: number[];
/**
 * Creates a _ProcessSignMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
export declare function createProcessSignMetadataInstruction(accounts: ProcessSignMetadataInstructionAccounts): web3.TransactionInstruction;
//# sourceMappingURL=processSignMetadata.d.ts.map