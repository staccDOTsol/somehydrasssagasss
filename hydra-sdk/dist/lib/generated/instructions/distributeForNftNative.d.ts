/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category DistributeForNftNative
 * @category generated
 */
export type DistributeForNftNativeInstructionArgs = {
    distributeForMint: boolean;
};
/**
 * @category Instructions
 * @category DistributeForNftNative
 * @category generated
 */
export declare const distributeForNftNativeStruct: beet.BeetArgsStruct<DistributeForNftNativeInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _distributeForNftNative_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] authority
 * @property [_writable_] member
 * @property [_writable_] membershipMintTokenAccount
 * @property [] membershipKey
 * @property [_writable_] membershipVoucher
 * @property [_writable_] fanout
 * @property [_writable_] holdingAccount
 * @property [_writable_] fanoutForMint
 * @property [_writable_] fanoutMintMemberTokenAccount
 * @property [] collection
 * @property [] metadata
 * @category Instructions
 * @category DistributeForNftNative
 * @category generated
 */
export type DistributeForNftNativeInstructionAccounts = {
    payer: web3.PublicKey;
    authority: web3.PublicKey;
    member: web3.PublicKey;
    membershipMintTokenAccount: web3.PublicKey;
    membershipKey: web3.PublicKey;
    membershipVoucher: web3.PublicKey;
    fanout: web3.PublicKey;
    holdingAccount: web3.PublicKey;
    fanoutForMint: web3.PublicKey;
    fanoutMintMemberTokenAccount: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    rent?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    collection: web3.PublicKey;
    metadata: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const distributeForNftNativeInstructionDiscriminator: number[];
/**
 * Creates a _DistributeForNftNative_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DistributeForNftNative
 * @category generated
 */
export declare function createDistributeForNftNativeInstruction(accounts: DistributeForNftNativeInstructionAccounts, args: DistributeForNftNativeInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=distributeForNftNative.d.ts.map